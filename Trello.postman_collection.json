{
	"info": {
		"_postman_id": "c5044715-4e47-41ee-8e00-719b4a37dc54",
		"name": "Trello",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22001170",
		"_collection_link": "https://hoba-lone-wolf.postman.co/workspace/APi-journey-with-Tarek-ROshdy~ffc4daf6-1ec0-47e8-a15b-c2ac92fec915/collection/22001170-c5044715-4e47-41ee-8e00-719b4a37dc54?action=share&source=collection_link&creator=22001170"
	},
	"item": [
		{
			"name": "Create A board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsondata = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"boardID\", jsondata.id);\r",
							"\r",
							"// Test for existence of 'id', 'name', and 'url'\r",
							"pm.expect(jsondata).to.have.property('id');\r",
							"pm.expect(jsondata.id).to.be.a('string');\r",
							"\r",
							"pm.expect(jsondata).to.have.property('name');\r",
							"pm.expect(jsondata.name).to.be.a('string');\r",
							"\r",
							"pm.expect(jsondata).to.have.property('url');\r",
							"pm.expect(jsondata.url).to.be.a('string');\r",
							"\r",
							"let createdBoardname = pm.environment.get(\"myBoardname\");\r",
							"\r",
							"pm.test(\"Correct Board Name\", function () {\r",
							"    pm.expect(jsondata.name).to.eql(createdBoardname);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random 3-digit number\r",
							"const randomNumber = Math.floor(100 + Math.random() * 900);\r",
							"\r",
							"// Create the dynamic name\r",
							"const dynamicName = \"myBoard\" + randomNumber;\r",
							"\r",
							"// Save it as an environment variable (or use pm.globals.set for global)\r",
							"pm.environment.set(\"myBoardname\", dynamicName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url\n}}/1/boards/?name={{myBoardname}}&key={{key}}&token={{token}}",
					"host": [
						"{{base_url\n}}"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{myBoardname}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Created Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsondata = pm.response.json();\r",
							"\r",
							"pm.expect(jsondata.closed).to.eql(false)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url\n}}/1/boards/{{boardID}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url\n}}"
					],
					"path": [
						"1",
						"boards",
						"{{boardID}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				},
				"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://api.trello.com/1/boards/{id}?key=APIKey&token=APIToken' \\\r\n  --header 'Accept: application/json'"
			},
			"response": []
		},
		{
			"name": "Update Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Update name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql('Update board name');\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{base_url\n}}/1/boards/{{boardID}}?key={{key}}&token={{token}}&name=Update board name",
					"host": [
						"{{base_url\n}}"
					],
					"path": [
						"1",
						"boards",
						"{{boardID}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "Update board name"
						}
					]
				},
				"description": "Generated from cURL: curl --request PUT \\\r\n  --url 'https://api.trello.com/1/boards/{id}?key=APIKey&token=APIToken'"
			},
			"response": []
		},
		{
			"name": "Get Updated Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsondata = pm.response.json();\r",
							"\r",
							"pm.expect(jsondata.closed).to.eql(false)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url\n}}/1/boards/{{boardID}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url\n}}"
					],
					"path": [
						"1",
						"boards",
						"{{boardID}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				},
				"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://api.trello.com/1/boards/{id}?key=APIKey&token=APIToken' \\\r\n  --header 'Accept: application/json'"
			},
			"response": []
		},
		{
			"name": "Create List",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random 3-digit number\r",
							"const randomNumber = Math.floor(100 + Math.random() * 900);\r",
							"\r",
							"// Create the dynamic name\r",
							"const dynamicName = \"myList\" + randomNumber;\r",
							"\r",
							"// Save it as an environment variable (or use pm.globals.set for global)\r",
							"pm.environment.set(\"myListname\", dynamicName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsondata;\r",
							"\r",
							"// Check if response is JSON and parse it\r",
							"try {\r",
							"    jsondata = pm.response.json();\r",
							"} catch (e) {\r",
							"    console.error(\"Response is not valid JSON:\", pm.response.text());\r",
							"    pm.test(\"Response is valid JSON\", function () {\r",
							"        pm.expect.fail(\"Response is not valid JSON\");\r",
							"    });\r",
							"    return; // Exit if the response is not JSON\r",
							"}\r",
							"\r",
							"pm.environment.set(\"listID\", jsondata.id);\r",
							"\r",
							"// Test for existence of 'id', 'name', and 'url'\r",
							"pm.expect(jsondata).to.have.property('id');\r",
							"pm.expect(jsondata.id).to.be.a('string');\r",
							"\r",
							"pm.expect(jsondata).to.have.property('name');\r",
							"pm.expect(jsondata.name).to.be.a('string');\r",
							"\r",
							"let createdListname = pm.environment.get(\"myListname\");\r",
							"\r",
							"pm.test(\"Correct Board Name\", function () {\r",
							"    pm.expect(jsondata.name).to.eql(createdListname);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url\n}}/1/lists?name={{myListname}}&idBoard={{boardID}}&key={{key}}&token={{token}}",
					"host": [
						"{{base_url\n}}"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "{{myListname}}"
						},
						{
							"key": "idBoard",
							"value": "{{boardID}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				},
				"description": "Generated from cURL: curl --request POST \\\r\n  --url 'https://api.trello.com/1/lists?name={name}&idBoard=5abbe4b7ddc1b351ef961414&key=APIKey&token=APIToken'"
			},
			"response": []
		},
		{
			"name": "Get Created List",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url\n}}/1/lists/{{listID}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url\n}}"
					],
					"path": [
						"1",
						"lists",
						"{{listID}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				},
				"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://api.trello.com/1/lists/{id}?key=APIKey&token=APIToken'"
			},
			"response": []
		},
		{
			"name": "Update list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Update name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql('updatelistname');\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{base_url\n}}/1/lists/{{listID}}?key={{key}}&token={{token}}&name=updatelistname",
					"host": [
						"{{base_url\n}}"
					],
					"path": [
						"1",
						"lists",
						"{{listID}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "updatelistname"
						}
					]
				},
				"description": "Generated from cURL: curl --request PUT \\\r\n  --url 'https://api.trello.com/1/lists/{id}?key=APIKey&token=APIToken'"
			},
			"response": []
		},
		{
			"name": "Get Updated  List",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url\n}}/1/lists/{{listID}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url\n}}"
					],
					"path": [
						"1",
						"lists",
						"{{listID}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				},
				"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://api.trello.com/1/lists/{id}?key=APIKey&token=APIToken'"
			},
			"response": []
		},
		{
			"name": "Create Card",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random 3-digit number\r",
							"const randomNumber = Math.floor(100 + Math.random() * 900);\r",
							"\r",
							"// Create the dynamic name\r",
							"const dynamicName = \"myCard\" + randomNumber;\r",
							"\r",
							"// Save it as an environment variable (or use pm.globals.set for global)\r",
							"pm.environment.set(\"myCardname\", dynamicName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"let jsondata = pm.response.json(); // Parse the JSON response body\r",
							"pm.environment.set(\"cardId\", jsondata.id);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url\n}}/1/cards?idList={{listID}}&key={{key}}&token={{token}}&name={{myCardname}}",
					"host": [
						"{{base_url\n}}"
					],
					"path": [
						"1",
						"cards"
					],
					"query": [
						{
							"key": "idList",
							"value": "{{listID}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "{{myCardname}}"
						}
					]
				},
				"description": "Generated from cURL: curl --request POST \\\r\n  --url 'https://api.trello.com/1/cards?idList=5abbe4b7ddc1b351ef961414&key=APIKey&token=APIToken' \\\r\n  --header 'Accept: application/json'"
			},
			"response": []
		},
		{
			"name": "Get Created Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url\n}}/1/cards/{{cardId}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url\n}}"
					],
					"path": [
						"1",
						"cards",
						"{{cardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				},
				"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://api.trello.com/1/cards/{id}?key=APIKey&token=APIToken' \\\r\n  --header 'Accept: application/json'"
			},
			"response": []
		},
		{
			"name": "Update Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Update name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql('UpdateCardname');\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url\n}}/1/cards/{{cardId}}?key={{key}}&token={{token}}&name=UpdateCardname",
					"host": [
						"{{base_url\n}}"
					],
					"path": [
						"1",
						"cards",
						"{{cardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "UpdateCardname"
						}
					]
				},
				"description": "Generated from cURL: curl --request PUT \\\r\n  --url 'https://api.trello.com/1/cards/{id}?key=APIKey&token=APIToken' \\\r\n  --header 'Accept: application/json'"
			},
			"response": []
		},
		{
			"name": "Get Updated Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url\n}}/1/cards/{{cardId}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url\n}}"
					],
					"path": [
						"1",
						"cards",
						"{{cardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				},
				"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://api.trello.com/1/cards/{id}?key=APIKey&token=APIToken' \\\r\n  --header 'Accept: application/json'"
			},
			"response": []
		},
		{
			"name": "Delete Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200  \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url\n}}/1/cards/{{cardId}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url\n}}"
					],
					"path": [
						"1",
						"cards",
						"{{cardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				},
				"description": "Generated from cURL: curl --request DELETE \\\r\n  --url 'https://api.trello.com/1/cards/{id}?key=APIKey&token=APIToken'"
			},
			"response": []
		},
		{
			"name": "Get DeletedCard",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url\n}}/1/cards/{{cardId}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url\n}}"
					],
					"path": [
						"1",
						"cards",
						"{{cardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				},
				"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://api.trello.com/1/cards/{id}?key=APIKey&token=APIToken' \\\r\n  --header 'Accept: application/json'"
			},
			"response": []
		},
		{
			"name": "Archive list",
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{base_url\n}}/1/lists/{{listID}}/closed?key={{key}}&token={{token}}&value=true",
					"host": [
						"{{base_url\n}}"
					],
					"path": [
						"1",
						"lists",
						"{{listID}}",
						"closed"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "value",
							"value": "true"
						}
					]
				},
				"description": "Generated from cURL: curl --request PUT \\\r\n  --url 'https://api.trello.com/1/lists/{id}/closed?key=APIKey&token=APIToken'"
			},
			"response": []
		},
		{
			"name": "Get archived  List",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url\n}}/1/lists/{{listID}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url\n}}"
					],
					"path": [
						"1",
						"lists",
						"{{listID}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				},
				"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://api.trello.com/1/lists/{id}?key=APIKey&token=APIToken'"
			},
			"response": []
		},
		{
			"name": "Delete A board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData =pm.response.json();\r",
							"pm.test(\"Json data value is Null\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData._value).to.eql(null);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url\n}}/1/boards/{{boardID}}?key={{key}}&token={{token}}&id={{myBoardname}}",
					"host": [
						"{{base_url\n}}"
					],
					"path": [
						"1",
						"boards",
						"{{boardID}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "id",
							"value": "{{myBoardname}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Deleted  Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Board is succesfully deleted\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Request not found\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"The requested resource was not found.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://api.trello.com/1/boards/{{boardID}}?key={{key}}&token={{token}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						"{{boardID}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				},
				"description": "Generated from cURL: curl --request GET \\\r\n  --url 'https://api.trello.com/1/boards/{id}?key=APIKey&token=APIToken' \\\r\n  --header 'Accept: application/json'"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Response time is less than 3000ms\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
					"});"
				]
			}
		}
	]
}